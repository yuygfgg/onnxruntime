parameters:
- name: arch
  type: string

- name: machine_pool
  type: string

- name: cmake_build_type
  type: string
  default: 'Release'
  values:
   - Debug
   - Release
   - RelWithDebInfo
   - MinSizeRel

- name: device
  type: string
  default: 'CPU'

- name: with_cache
  type: boolean
  default: false

- name: extra_build_arg
  type: string
  default: ''

jobs:
- job: Linux_py_Wheels_${{ parameters.arch }}
  timeoutInMinutes: 240
  workspace:
    clean: all
  pool: 
    name: ${{ parameters.machine_pool }}
    os: linux
    ${{ if eq(parameters.arch, 'aarch64') }}:
      hostArchitecture: Arm64
  templateContext:
      codeSignValidation:
        enabled: true
        break: true
      psscriptanalyzer:
        enabled: true
      sdl:
        binskim:
          enabled: true
          scanOutputDirectoryOnly: true
          targetPathPattern: '+:file|$(Build.ArtifactStagingDirectory)\**\*.so'
      outputs:
      - output: pipelineArtifact
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: linux_cpu_wheel_${{ parameters.arch }}
  variables:
    # The build machine pool doesn't have dotnet, so it can't run CG.
    - name: skipComponentGovernanceDetection
      value: true
    - name: ORT_CACHE_DIR
      value: $(Agent.TempDirectory)/ort_ccache
    - name: TODAY
      value: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
    - name: extra_build_args
      ${{ if ne(parameters.extra_build_arg, '') }}:
        value: -x ${{ parameters.extra_build_arg }}
      ${{ if eq(parameters.extra_build_arg, '') }}:
        value: ''
  steps:
    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()

    - checkout: self
      clean: true
      submodules: none

    - template: set-nightly-build-option-variable-step.yml

    - template: get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/inference/${{ parameters.arch }}/python/cpu/Dockerfile
        Context: tools/ci_build/github/linux/docker/inference/${{ parameters.arch }}/python/cpu
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u )"
        Repository: onnxruntimecpubuildpython${{ parameters.arch }}
        ${{ if eq(parameters.arch, 'aarch64') }}:
            UpdateDepsTxt: false

    - template: linux-build-step-with-cache.yml
      parameters:
        WithCache: ${{parameters.with_cache}}
        Today: $(TODAY)
        AdditionalKey: Linux_py_Wheels_${{ parameters.arch }}
        CacheDir: $(ORT_CACHE_DIR)
        ChangeEveryCommit: true
        BuildStep:
          - task: Bash@3
            displayName: 'Build Python Wheel'
            inputs:
              targetType: filePath
              filePath: tools/ci_build/github/linux/run_python_dockerbuild.sh
              arguments: -i onnxruntimecpubuildpython${{ parameters.arch }} -d "${{ parameters.device }}" -c ${{ parameters.cmake_build_type }} $(extra_build_args)
            ${{ if eq(parameters.with_cache, 'true') }}:
              env:
                ADDITIONAL_DOCKER_PARAMETER: "--volume $(ORT_CACHE_DIR):/cache -e CCACHE_DIR=/cache -e ORT_BUILD_WITH_CACHE=1"


    - script: |
        mv $(Build.BinariesDirectory)/${{ parameters.cmake_build_type }} $(Build.BinariesDirectory)/dist .
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Move files'

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'